apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-tooling
data:
  system.sh: |
    #!/bin/sh
    set -e

    # set noninteractive frontend for apt
    export DEBIAN_FRONTEND=noninteractive

    # update and install packages
    apt update -y
    apt upgrade -y
    apt install rsync python3 python3-venv wget curl neofetch {{ .Values.packages }} -y

    # install kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    # setup neofetch
    ln -sf /bin/neofetch /bin/fastfetch

    # clean out defaults
    rm -rfv /config/workspace

    # setup a symlink from /config/data to the users home directory under the tdk folder
    mv /config/data /config/data.bak || true
    mkdir -vp "$HOME/tdk/data"
    ln -sv "$HOME/tdk/data" /config/data

    # apply defaults only if /config/data is empty and a backup exists
    if [ -d /config/data.bak ] && [ -z "$(ls -A /config/data)" ]; then
      echo "/config/data is empty, restoring defaults"
      rsync -a -P --delete /config/data.bak/ /config/data/ || true
    else
      echo "Skipping restore, /config/data already has content or no backup exists."
    fi

    # setup a symlink from /config/extensions to the users home directory under the tdk folder
    mv /config/extensions /config/extensions.bak || true
    mkdir -vp "$HOME/tdk/extensions"
    ln -sv "$HOME/tdk/extensions" /config/extensions

    # apply defaults only if /config/extensions is empty and a backup exists
    if [ -d /config/extensions.bak ] && [ -z "$(ls -A /config/extensions)" ]; then
      echo "/config/extensions is empty, restoring defaults"
      rsync -a -P --delete /config/extensions.bak/ /config/extensions/ || true
    else
      echo "Skipping restore, /config/extensions already has content or no backup exists."
    fi

    # link the /config/workspace to the users home directory under the tdk folder
    mkdir -vp "$HOME/tdk/workspace"
    ln -sv "$HOME/tdk/workspace" /config/workspace

    # set permissions
    chown -R abc:abc "$HOME/tdk"

    # install gh cli
    mkdir -p -m 755 /etc/apt/keyrings
    out=$(mktemp)
    wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg
    cat $out
    tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
    chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
    mkdir -p -m 755 /etc/apt/sources.list.d
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    apt update -y
    apt install gh -y
